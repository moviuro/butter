#!/usr/bin/env bash

__run () {
    # TODO: change logic: all commands don't require the mountpoints etc.
    __init

    __parse_cmd "$@"
}

__parse_cmd () {
    case "$1" in
        bootstrap)
            shift
            __require_root
            __cmd_bootstrap "$@"
            exit ;;
        create)
            shift
            __require_root
            __cmd_create "$@"
            exit ;;
        destroy)
            shift
            __require_root
            __cmd_destroy "$@"
            exit ;;
        snaplist)
            shift
            __cmd_snaplist "$@"
            exit ;;
        snapshot)
            shift
            __require_root
            __cmd_snapshot "$@"
            exit ;;
        snapremove)
            shift
            __require_root
            __cmd_snapremove "$@"
            exit ;;
        set)
            shift
            __require_root
            __cmd_set "$@"
            exit ;;
        get)
            shift
            __cmd_get "$@"
            exit ;;
        help)
            shift
            __cmd_help
            exit ;;
        *)
            shift
            __cmd_help >&2
            exit 1 ;;
    esac
}

__cmd_create () {
    local _mountpoint _escaped_name _path

    _mountpoint="$1"
    _escaped_name="$(__escape "$_mountpoint")"
    _path="$butter_host"/"$_escaped_name"

    __require_bootstrapped
    btrfs subvolume create "$butter_root/$_path"
    __set_one_prop "mountpoint" "$_mountpoint" "$butter_root/$_path"
    __set_one_prop "snapshot.default.max" "5" "$butter_root/$_path"
}

__cmd_destroy () {
    :
}

__cmd_snapshot () {
    local _mountpoint _snaptype _path _date

    _mountpoint="$1"
    _snaptype="${2:-default}"
    _path="$(__find_path "$_mountpoint")"
    _date="$(date -u "+%Y-%m-%dT%H:%M:%SZ")"

    btrfs subvolume snapshot -r -- "$_path" "$_path@$_snaptype@$_date"
}

__cmd_snapremove () {
    local _force _answer _opt _date _mountpoint _snaptype _path _subvolume

    _force=0

    while getopts ":fd:m:t:" _opt; do
        case "$_opt" in
            f) _force=1;;
            d) _date="$OPTARG";;
            m) _mountpoint="$OPTARG";;
            t) _snaptype="$(__escape "$OPTARG")";;
        esac
    done

    shift "$(( OPTIND - 1 ))"

    # Mountpoint was specified and we use it to filter
    if [[ -n "$_mountpoint" ]]; then
        _path="$(__find_path "$_mountpoint")"
    else
        _path="$butter_root/$butter_host/*"
    fi

    if (( _force )); then
        for _subvolume in $_path@${_snaptype:-*}@"$_date"*; do
            btrfs subvolume delete "$_subvolume"
        done
    else
        for _subvolume in $_path@${_snaptype:-*}@"$_date"*; do
            printf '%s\n%s\n' "Will now destroy $_subvolume" "Continue [yes/NO]?"
            read _answer
            case "$_answer" in
                [yY][eE][sS])
                    btrfs subvolume delete "$_subvolume"
                    ;;
            esac
        done
    fi
}


__cmd_snaplist () {
    local _noheader _opt _date _mountpoint _snaptype _path _subvolume

    _noheader=0

    while getopts ":Hd:m:t:" _opt; do
        case "$_opt" in
            H) _noheader=1;;
            d) _date="$OPTARG";;
            m) _mountpoint="$OPTARG";;
            t) _snaptype="$(__escape "$OPTARG")";;
        esac
    done

    shift "$(( OPTIND - 1 ))"

    # Mountpoint was specified and we use it to filter
    if [[ -n "$_mountpoint" ]]; then
        _path="$(__find_path "$_mountpoint")"
    else
        _path="$butter_root/$butter_host/*"
    fi

    {
    (( _noheader )) || printf '%s@%s@%s\n' 'MOUNTPOINT' 'TYPE' 'DATE'
    for _subvolume in $_path@${_snaptype:-*}@"$_date"*; do
        printf '%s\n' "${_subvolume##*/}"
    done
    } | column -ts@
}

__cmd_set () {
    local _prop _value _mountpoint _path _new_path

    _prop="$1"
    _value="$2"
    _mountpoint="$3"
    _path="$(__find_path "$_mountpoint")"

    __require_bootstrapped

    # We can't move the mountpoint
    if [[ "$_prop" == "mountpoint" ]]; then
        __fatal "Can't move a mountpoint: it's bound to break"
    fi
    __set "$butter_prop_prefix.$_prop" "$_value" "$_path"
}

__cmd_get () {
    local _prop _mountpoint

    _prop="$1"
    _mountpoint="$2"
    _path="$(__find_path "$_mountpoint")"

    __require_bootstrapped
    __require_in_props "$_prop"
    __get "$butter_prop_prefix.$_prop" "$_path"

}

__cmd_help () {
    __print_help
}

__cmd_bootstrap () {
    __info "butter root is $butter_root"
    __bootstrap
    __require_bootstrapped
}

__require_root () {
    [[ -w "$butter_root" ]] || __fatal "Can't write to $butter_root"
}
