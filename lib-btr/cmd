#!/usr/bin/env bash

__run () {
    # TODO: change logic: all commands don't require the mountpoints etc.
    __init

    __parse_cmd "$@"
}

__parse_cmd () {
    case "$1" in
        add)
            shift
            __require_root
            __cmd_add "$@"
            exit ;;
        bootstrap)
            shift
            __require_root
            __cmd_bootstrap "$@"
            exit ;;
        create)
            shift
            __require_root
            __cmd_create "$@"
            exit ;;
        list)
            shift
            __cmd_list "$@"
            exit ;;
        remove)
            shift
            __cmd_remove "$@"
            exit ;;
        snaplist)
            shift
            __cmd_snaplist "$@"
            exit ;;
        snapshot)
            shift
            __require_root
            __cmd_snapshot "$@"
            exit ;;
        snapremove)
            shift
            __require_root
            __cmd_snapremove "$@"
            exit ;;
        set)
            shift
            __require_root
            __cmd_set "$@"
            exit ;;
        get)
            shift
            __cmd_get "$@"
            exit ;;
        help)
            shift
            __cmd_help
            exit ;;
        find)
            shift
            __cmd_find "$@"
            exit ;;
        *)
            shift
            __cmd_help >&2
            exit 1 ;;
    esac
}

__cmd_add () {
    local _new_mountpoints _type _managed_mountpoints _new_mountpoint _found \
          _mountpoint
    mapfile -t _new_mountpoints < <(__read_targets "$1")
    _type="${2:-default}"
    mapfile -t _managed_mountpoints < <(__get_one_prop \
                             "mountpoints.managed.$_type" "$butter_root/$butter_host")

    for _new_mountpoint in "${_new_mountpoints[@]}"; do
        _found=0
        for _mountpoint in "${_managed_mountpoints[@]}"; do
            if [[ "$_mountpoint" == "$_new_mountpoint" ]]; then
                _found=1
                break
            fi
        done
        if ! (( _found )); then
            _managed_mountpoints+=("$_new_mountpoint")
        fi
    done

    __set_one_prop "mountpoints.managed.$_type" \
        "$(for i in ${_managed_mountpoints[@]}; do printf '%s\n' $i; done)" \
        "$butter_root/$butter_host"
}

__cmd_create () {
    local _mountpoint _escaped_name _path

    _mountpoint="$1"
    _escaped_name="$(__escape "$_mountpoint")"
    _path="$butter_root/$butter_host/$_escaped_name"
    shift

    __require_bootstrapped
    btrfs subvolume create -- "$_path"
    __set_one_prop "mountpoint" "$_mountpoint" "$_path"
    __set_one_prop "snapshot.default.max" "5" "$_path"
    __set_one_prop "snapshot.is" "0" "$_path"
    __set_one_prop "uuid" "$(uuidgen -r)" "$_path"

    __cmd_set "$_mountpoint" "$@"
}

__cmd_list () {
    local _lists _keyvalue _type _mountpoints _mountpoint

    mapfile -t _lists < <(
        getfattr -d "$butter_root/$butter_host" 2>/dev/null |
          grep '=' |
          awk -F. '{ print $7 }'
    )

    { printf '%s^%s\n' "TYPE" "MOUNTPOINT"
    for _keyvalue in "${_lists[@]}"; do
        _type="${_keyvalue%=*}"
        mapfile -t _mountpoints < <(
            __get_one_prop "mountpoints.managed.$_type" \
                           "$butter_root/$butter_host"
        )
        for _mountpoint in "${_mountpoints[@]}"; do
            printf '%s^%s\n' "$_type" "$_mountpoint"
        done
    done } | column -ts^
}

__cmd_snapshot () {
    local _mountpoints _mountpoint _path _snaptype _snaplist _max _to_delete \
          _number

    _cs_mountpoints="$1"
    shift
    _args=("$@")

    # we extract the snapshot type
    while (( $# > 1 )); do
        if [[ "$1" == "type" ]]; then
            _snaptype="$2"
        fi
        shift 2
    done
    _snaptype="${_snaptype:-default}"

    mapfile -t _mountpoints < <(__read_targets "$_cs_mountpoints" "$_snaptype")

    for _mountpoint in "${_mountpoints[@]}"; do
        _path="$(__find_path "$_mountpoint")"

        _max="$(__get_one_prop "snapshot.${_snaptype}.max" "$_path")"
        if [[ -z "$_max" ]]; then
            _max="$(__get_one_prop "snapshot.default.max" "$_path")"
            [[ -z "$_max" ]] && _max=$default_max_snapshots
        fi

        if (( _max != 0 )); then
            # We take a snapshot
            __do_snapshot "$_mountpoint" "${_args[@]}"

            # We make sure to honor "snapshot.$_snaptype.max"
            mapfile -t _snaplist < <(__find_all_sort "snapshot.timestamp" \
              "snapshot.type" "$_snaptype" "mountpoint" "$_mountpoint"\
              "snapshot.is" "1")

            if (( "${#_snaplist[@]}" > "$_max" )); then
                _to_delete=$(( ${#_snaplist[@]} - $_max ))
                for ((_number=0;_number<$_to_delete;_number++)); do
                    btrfs subvolume delete -- "${_snaplist[$_number]}" >/dev/null
                done
            fi
        fi
    done
}

# Take a snapshot of a given mountpoint, assign it lots of properties
# usage: __do_snapshot PATH [PROP VALUE [...]]
__do_snapshot () {
    local _mountpoint _path _escaped_path _date _uuid _to_path _prop _value

    _mountpoint="$1"
    _path="$(__find_path "$_mountpoint")"
    _escaped_path="$(__escape "$_path")"

    shift

    _date="$(date "+%s")"
    _uuid="$(uuidgen -r)"
    _to_path="$butter_root/$butter_host/$_escaped_path@$_uuid"
    _tmp_path="${_to_path}.tmp"

    # a temporary snapshot because btrfs(8) still sucks
    btrfs subvolume snapshot -- "$_path" "$_tmp_path" >/dev/null

    while (( $# > 1 )); do
        _prop="$1"
        _value="$2"

        __set_one_prop "snapshot.$_prop" "$_value" "$_tmp_path"
        shift 2
    done

    # we set the timestamp
    __set_one_prop "snapshot.timestamp" "$_date" "$_tmp_path"
    # we set an uuid
    __set_one_prop "uuid" "$_uuid" "$_tmp_path"
    # we set the snapshot boolean
    __set_one_prop "snapshot.is" "1" "$_tmp_path"
    # we set the snapshot's mountpoint
    __set_one_prop "mountpoint" "$_mountpoint" "$_tmp_path"

    # we set the snapshot type if none was set
    if ! __get_one_prop "snapshot.type" "$_tmp_path" >/dev/null 2>&1; then
        __set_one_prop "snapshot.type" "default" "$_tmp_path"
    fi

    # we snapshot read-only
    btrfs subvolume snapshot -r -- "$_tmp_path" "$_to_path" >/dev/null
    btrfs subvolume delete -- "$_tmp_path" >/dev/null
}

__cmd_snapremove () {
    local _mountpoints _mountpoint _number _snaplist

    mapfile -t _mountpoints < <(__read_targets "$1")
    _number="${2:-$default_rm_snapshots}"
    shift 2

    for _mountpoint in "${_mountpoints[@]}"; do
        mapfile -t _snaplist < <(__find_all_sort "snapshot.timestamp" \
                                                 "snapshot.is" 1 \
                                                 "mountpoint" "$_mountpoint" \
                                                 "$@")

        for ((_num=0; _num < $_number; _num++)); do
            if [[ -n "${_snaplist[$_num]}" ]]; then
                btrfs subvolume delete -- "${_snaplist[$_num]}" >/dev/null &
            else
                break
            fi
        done
    done
}


__cmd_snaplist () {
    local _snaplist _subvolume _mountpoint _uuid _type _timestamp _date

    mapfile -t _snaplist < <(__find_all "snapshot.is" "1")
    {
      printf '%s^%s^%s^%s\n' 'MOUNTPOINT' 'TYPE' 'DATE' 'UUID'
      {
        for _subvolume in "${_snaplist[@]}"; do
            _mountpoint="$(__get_one_prop "mountpoint" "$_subvolume")"
            _uuid="$(__get_one_prop "uuid" "$_subvolume")"
            _type="$(__get_one_prop "snapshot.type" "$_subvolume")"
            _timestamp="$(__get_one_prop "snapshot.timestamp" "$_subvolume")"
            _date="$(date --date=@"$_timestamp")"
            printf '%s^%s^%s^%s\n' "$_mountpoint" "$_type" "$_timestamp" \
              "$_uuid"
        done
      } |
        sort -n |
        while IFS=^ read -r _mountpoint _type _timestamp _uuid; do
            printf '%s^%s^%s^%s\n' "$_mountpoint" "$_type" \
              "$(date --date="@$_timestamp")" "$_uuid"
        done
    } | column -ts^
}

__cmd_set () {
    local _prop _value _mountpoint _path _err_msg

    __require_bootstrapped
    mapfile -t _mountpoints < <(__read_targets "$1")
    shift

    for _mountpoint in "${_mountpoints[@]}"; do
        _path="$(__find_path "$_mountpoint")"
        _err_msg="Can't change the value of:"

        for _arg in "$@"; do
            if [[ -z "$_prop" ]]; then
                _prop="$_arg"
            else
                _value="$_arg"

                # We cannot change some properties
                case "$_prop" in
                    "mountpoint"|\
                    "uuid"|\
                    "snapshot.is") __fatal "$_err_msg $_prop";;
                esac

                __set_one_prop "$_prop" "$_value" "$_path"
                unset _prop
            fi
        done
    done
}

__cmd_get () {
    local _opt _header _valuesonly _mountpoint _prop

    _header=1
    _valuesonly=0
    __require_bootstrapped

    while getopts ":Ho:" _opt; do
        case "$_opt" in
            H) _header=0 ;;
            o) [[ "$OPTARG" == "values" ]] && _valuesonly=1 ;;
            *) __fatal "Unknown option: $OPT"
        esac
    done
    shift $((OPTIND-1))

    mapfile -t _mountpoints < <(__read_targets "$1")
    shift

    if ((_valuesonly)); then
        for _mountpoint in "${_mountpoints[@]}"; do
            _path="$(__find_path "$_mountpoint")"
            for _prop in "$@"; do
                _value="$(__get_one_prop "$_prop" "$_path")"
                printf '%s\n' "$_value"
            done
        done
    else
        {
            if ((_header)); then
                printf '%s^%s^%s\n' "MOUNTPOINT" "PROP" "VALUE"
            fi
            for _mountpoint in "${_mountpoints[@]}"; do
                _path="$(__find_path "$_mountpoint")"

                for _prop in "$@"; do
                    _value="$(__get_one_prop "$_prop" "$_path")"
                    printf '%s^%s^%s\n' "$_mountpoint" "$_prop" "$_value"
                done
            done
        } | column -ts^
    fi
}

__cmd_help () {
    __print_help
}

__cmd_bootstrap () {
    cat << EOB
Actually, I won't bootstrap on my own. (Too complicated)
Do this:

 # mkdir "$butter_root"
 # mount /dev/sdNX -osubvol=/ "$butter_root"
 # mkdir -p "$butter_root/$butter_host"

EOB
}

__cmd_find () {
    __find_all "$@"
}

__require_root () {
    [[ -w "$butter_root" ]] || __fatal "Can't write to $butter_root"
}

__require_bootstrapped () {
    local _ok
    _ok=1

    findmnt -- "$butter_root" >/dev/null 2>&1 || _ok=0
    [[ -d "$butter_root/$butter_host" ]] || _ok=0
    (( _ok )) || __fatal 'butter was not bootstrapped: run `butter bootstrap`'
}

__cmd_remove () {
    local _type _rm_mountpoints _managed_mountpoints _mountpoint _managed \
          _new_mountpoints

    _type="${2:-default}"
    mapfile -t _rm_mountpoints < <(__read_targets "$1" "$_type")
    mapfile -t _managed_mountpoints < <(
        __get_one_prop "mountpoints.managed.$_type" "$butter_root/$butter_host"
    )

    for _mountpoint in "${_rm_mountpoints[@]}"; do
        for _managed in "${_managed_mountpoints[@]}"; do
            if [[ "$_mountpoint" != "$_managed" ]]; then
                _new_mountpoints+=("$_managed")
            fi
        done
        _managed_mountpoints=("${_new_mountpoints[@]}")
        unset _new_mountpoints
    done

    if (( ${#_managed_mountpoints[@]} )); then
        __set_one_prop "mountpoints.managed.$_type" \
          "$(for i in ${_managed_mountpoints[@]}; do printf '%s\n' $i; done)" \
          "$butter_root/$butter_host"
    else
        __unset_one_prop "mountpoints.managed.$_type" \
          "$butter_root/$butter_host"
    fi
}
